'use client';

import { useState, useEffect } from 'react';
import axios from 'axios';
import { useRouter } from 'next/navigation';
import { toast } from 'react-hot-toast';
import DashboardLayout from '@/components/Dashboardlayout';
import { useAuth } from '@/context/AuthContext';

const PlanApprovalForm = () => {
  const router = useRouter();
  const { user } = useAuth();

  // Initialize form data
  const [formData, setFormData] = useState({
    standNumber: '',
    postalAddress: '',
    estimatedCost: '',
    constructionType: '',
    projectDescription: '',
    startDate: '',
    completionDate: '',
    buildingContractor: '',
    architect: '',
    ownerName: '',
    email: '',
    contact: '',
    purposeOfBuilding: '',
  });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const [testResult, setTestResult] = useState<string | null>(null);

  // Pre-fill form with user data if available
  useEffect(() => {
    if (user) {
      setFormData(prevData => ({
        ...prevData,
        ownerName: user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : prevData.ownerName,
        email: user.email || prevData.email,
      }));
    }
  }, [user]);

  // Test authentication
  const testAuthentication = async () => {
    try {
      setTestResult(null);
      const token = localStorage.getItem('token');

      if (!token) {
        setTestResult('No token found in localStorage');
        return;
      }

      setTestResult(`Token found: ${token.substring(0, 10)}...`);

      // Test authentication
      const response = await axios.get('http://localhost:5001/api/auth/me', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      setTestResult(`Authentication successful: ${JSON.stringify(response.data)}`);
    } catch (error: any) {
      setTestResult(`Authentication failed: ${error.response?.data?.message || error.message}`);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(false);

    try {
      // Get the authentication token from localStorage
      const token = localStorage.getItem('token');
      console.log('Token available:', token ? 'Yes' : 'No');
      console.log('Token value:', token);

      if (!token) {
        throw new Error('Authentication required. Please log in again.');
      }

      // Log the form data being submitted
      console.log('Submitting form data:', formData);

      // Test if we can make a simple authenticated request
      try {
        const testResponse = await axios.get('http://localhost:5001/api/auth/me', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        console.log('Authentication test successful:', testResponse.data);
      } catch (testError: any) {
        console.error('Authentication test failed:', testError.response?.data || testError.message);
      }

      // Include the token in the request headers
      console.log('Sending request to API...');
      const response = await axios.post(
        'http://localhost:5001/api/applications',
        formData,
        {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        }
      );

      console.log('Form submitted successfully:', response.data);
      setSuccess(true);
      toast.success('Application submitted successfully!');

      // Redirect to the document verification page after a short delay
      setTimeout(() => {
        router.push('/applicant/document-verification');
      }, 2000);

      // Reset the form after successful submission
      setFormData({
        standNumber: '',
        postalAddress: '',
        estimatedCost: '',
        constructionType: '',
        projectDescription: '',
        startDate: '',
        completionDate: '',
        buildingContractor: '',
        architect: '',
        ownerName: '',
        email: '',
        contact: '',
        purposeOfBuilding: '',
      });
    } catch (err: any) {
      console.error('Error submitting form:', err);

      // Log detailed error information
      if (err.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        console.error('Error response data:', err.response.data);
        console.error('Error response status:', err.response.status);
        console.error('Error response headers:', err.response.headers);
      } else if (err.request) {
        // The request was made but no response was received
        console.error('Error request:', err.request);
      } else {
        // Something happened in setting up the request that triggered an Error
        console.error('Error message:', err.message);
      }

      const errorMessage = err.response?.data?.message || err.message || 'An error occurred while submitting the form. Please try again.';
      setError(errorMessage);
      toast.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <DashboardLayout userRole="applicant">
    <div className="min-h-screen bg-blueGray-50">

        {/* Form Container */}
        <div className="w-full p-6">
          <div className="relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded-lg bg-blueGray-100 border-0">
            <div className="rounded-t bg-white mb-0 px-6 py-6">
              <div className="text-center flex justify-between">
                <h6 className="text-[#224057] text-xl font-bold">
                  Plan Approval Form
                </h6>
                <button
                  type="submit"
                  disabled={loading}
                  className="bg-[#224057] text-white active:bg-[#224057] font-bold uppercase text-xs px-4 py-2 rounded shadow hover:shadow-md outline-none focus:outline-none mr-1 ease-linear transition-all duration-150"
                  onClick={handleSubmit}
                >
                  {loading ? 'Submitting...' : 'Submit'}
                </button>
              </div>
            </div>
            <div className="flex-auto px-4 lg:px-10 py-10 pt-0">
              <form onSubmit={handleSubmit}>
                <div className="flex flex-wrap">
                  {/* Stand Number */}
                  <div className="w-full lg:w-6/12 px-4">
                    <div className="relative w-full mb-3">
                      <label className="block uppercase text-[#224057] text-xs font-bold mb-2">
                        Stand Number
                      </label>
                      <input
                        type="text"
                        name="standNumber"
                        value={formData.standNumber}
                        onChange={handleChange}
                        className="border-0 px-3 py-3 placeholder-blueGray-300 text-[#224057] bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                        required
                      />
                    </div>
                  </div>

                  {/* Postal Address */}
                  <div className="w-full lg:w-6/12 px-4">
                    <div className="relative w-full mb-3">
                      <label className="block uppercase text-[#224057] text-xs font-bold mb-2">
                        Postal Address
                      </label>
                      <input
                        type="text"
                        name="postalAddress"
                        value={formData.postalAddress}
                        onChange={handleChange}
                        className="border-0 px-3 py-3 placeholder-blueGray-300 text-[#224057] bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                        required
                      />
                    </div>
                  </div>

                  {/* Estimated Cost */}
                  <div className="w-full lg:w-6/12 px-4">
                    <div className="relative w-full mb-3">
                      <label className="block uppercase text-[#224057] text-xs font-bold mb-2">
                        Estimated Cost
                      </label>
                      <input
                        type="text"
                        name="estimatedCost"
                        value={formData.estimatedCost}
                        onChange={handleChange}
                        className="border-0 px-3 py-3 placeholder-blueGray-300 text-[#224057] bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                        required
                      />
                    </div>
                  </div>

                  {/* Construction Type */}
                  <div className="w-full lg:w-6/12 px-4">
                    <div className="relative w-full mb-3">
                      <label className="block uppercase text-[#224057] text-xs font-bold mb-2">
                        Construction Type
                      </label>
                      <select
                        name="constructionType"
                        value={formData.constructionType}
                        onChange={handleChange}
                        className="border-0 px-3 py-3 placeholder-blueGray-300 text-[#224057] bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                        required
                      >
                        <option value="">Select Construction Type</option>
                        <option value="Residential">Residential</option>
                        <option value="Commercial">Commercial</option>
                        <option value="Industrial">Industrial</option>
                        <option value="Other">Other</option>
                      </select>
                    </div>
                  </div>

                  {/* Project Description */}
                  <div className="w-full px-4">
                    <div className="relative w-full mb-3">
                      <label className="block uppercase text-[#224057] text-xs font-bold mb-2">
                        Project Description
                      </label>
                      <textarea
                        name="projectDescription"
                        value={formData.projectDescription}
                        onChange={handleChange}
                        className="border-0 px-3 py-3 placeholder-blueGray-300 text-[#224057] bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                        rows={4}
                        required
                      />
                    </div>
                  </div>

                  {/* Start Date */}
                  <div className="w-full lg:w-6/12 px-4">
                    <div className="relative w-full mb-3">
                      <label className="block uppercase text-[#224057] text-xs font-bold mb-2">
                        Start Date
                      </label>
                      <input
                        type="date"
                        name="startDate"
                        value={formData.startDate}
                        onChange={handleChange}
                        className="border-0 px-3 py-3 placeholder-blueGray-300 text-[#224057] bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                        required
                      />
                    </div>
                  </div>

                  {/* Completion Date */}
                  <div className="w-full lg:w-6/12 px-4">
                    <div className="relative w-full mb-3">
                      <label className="block uppercase text-[#224057] text-xs font-bold mb-2">
                        Completion Date
                      </label>
                      <input
                        type="date"
                        name="completionDate"
                        value={formData.completionDate}
                        onChange={handleChange}
                        className="border-0 px-3 py-3 placeholder-blueGray-300 text-[#224057] bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                        required
                      />
                    </div>
                  </div>

                  {/* Building Contractor */}
                  <div className="w-full lg:w-6/12 px-4">
                    <div className="relative w-full mb-3">
                      <label className="block uppercase text-[#224057] text-xs font-bold mb-2">
                        Building Contractor
                      </label>
                      <input
                        type="text"
                        name="buildingContractor"
                        value={formData.buildingContractor}
                        onChange={handleChange}
                        className="border-0 px-3 py-3 placeholder-blueGray-300 text-[#224057] bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                        required
                      />
                    </div>
                  </div>

                  {/* Architect */}
                  <div className="w-full lg:w-6/12 px-4">
                    <div className="relative w-full mb-3">
                      <label className="block uppercase text-[#224057] text-xs font-bold mb-2">
                        Architect
                      </label>
                      <input
                        type="text"
                        name="architect"
                        value={formData.architect}
                        onChange={handleChange}
                        className="border-0 px-3 py-3 placeholder-blueGray-300 text-[#224057] bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                        required
                      />
                    </div>
                  </div>

                  {/* Owner Name */}
                  <div className="w-full lg:w-6/12 px-4">
                    <div className="relative w-full mb-3">
                      <label className="block uppercase text-[#224057] text-xs font-bold mb-2">
                        Owner Name
                      </label>
                      <input
                        type="text"
                        name="ownerName"
                        value={formData.ownerName}
                        onChange={handleChange}
                        className="border-0 px-3 py-3 placeholder-blueGray-300 text-[#224057] bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                        required
                      />
                    </div>
                  </div>

                  {/* Email */}
                  <div className="w-full lg:w-6/12 px-4">
                    <div className="relative w-full mb-3">
                      <label className="block uppercase text-[#224057] text-xs font-bold mb-2">
                        Email
                      </label>
                      <input
                        type="email"
                        name="email"
                        value={formData.email}
                        onChange={handleChange}
                        className="border-0 px-3 py-3 placeholder-blueGray-300 text-[#224057] bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                        required
                      />
                    </div>
                  </div>

                  {/* Contact */}
                  <div className="w-full lg:w-6/12 px-4">
                    <div className="relative w-full mb-3">
                      <label className="block uppercase text-[#224057] text-xs font-bold mb-2">
                        Contact
                      </label>
                      <input
                        type="text"
                        name="contact"
                        value={formData.contact}
                        onChange={handleChange}
                        className="border-0 px-3 py-3 placeholder-blueGray-300 text-[#224057] bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                        required
                      />
                    </div>
                  </div>

                  {/* Purpose of Building */}
                  <div className="w-full px-4">
                    <div className="relative w-full mb-3">
                      <label className="block uppercase text-[#224057] text-xs font-bold mb-2">
                        Purpose of Building
                      </label>
                      <textarea
                        name="purposeOfBuilding"
                        value={formData.purposeOfBuilding}
                        onChange={handleChange}
                        className="border-0 px-3 py-3 placeholder-blueGray-300 text-[#224057] bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                        rows={4}
                        required
                      />
                    </div>
                  </div>
                </div>

                {/* Success Message */}
                {success && (
                  <div className="mt-6 text-center">
                    <p className="text-green-600 font-semibold">Form submitted successfully!</p>
                  </div>
                )}

                {/* Error Message */}
                {error && (
                  <div className="mt-6 text-center">
                    <p className="text-red-600 font-semibold">{error}</p>
                  </div>
                )}

                {/* Test Authentication Button */}
                <div className="mt-6 text-center">
                  <button
                    type="button"
                    onClick={testAuthentication}
                    className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors"
                  >
                    Test Authentication
                  </button>

                  {testResult && (
                    <div className="mt-4 p-4 bg-gray-100 rounded-md text-left">
                      <pre className="whitespace-pre-wrap text-sm">{testResult}</pre>
                    </div>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
      </DashboardLayout>
  );
};

export default PlanApprovalForm;