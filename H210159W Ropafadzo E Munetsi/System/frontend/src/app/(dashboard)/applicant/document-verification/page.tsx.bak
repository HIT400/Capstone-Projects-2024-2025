// app/documentVerification/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'react-hot-toast';
import DashboardLayout from '@/components/Dashboardlayout';
import { useAuth } from '@/context/AuthContext';

interface ComplianceResult {
  compliant: boolean;
  issues: string[];
  textExtracted: string;
}

interface DocumentType {
  id: string;
  name: string;
  description: string;
  required: boolean;
  status: 'pending' | 'uploaded' | 'verified' | 'rejected';
  fileUrl?: string;
  feedback?: string;
}

export default function DocumentVerification() {
  const [file, setFile] = useState<File | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [complianceResult, setComplianceResult] = useState<ComplianceResult | null>(null);
  const [progress, setProgress] = useState(0);
  const [applications, setApplications] = useState<any[]>([]);
  const [selectedApplication, setSelectedApplication] = useState<any>(null);
  const [loadingApplications, setLoadingApplications] = useState(true);
  const [selectedDocType, setSelectedDocType] = useState<string>('');
  const [documentTypes, setDocumentTypes] = useState<DocumentType[]>([
    {
      id: 'building-plans',
      name: 'Building Plans',
      description: 'Detailed architectural drawings of the proposed building',
      required: true,
      status: 'pending'
    },
    {
      id: 'site-plan',
      name: 'Site Plan',
      description: 'Layout showing the location of the building on the property',
      required: true,
      status: 'pending'
    },
    {
      id: 'structural-calculations',
      name: 'Structural Calculations',
      description: 'Engineering calculations for structural elements',
      required: true,
      status: 'pending'
    },
    {
      id: 'title-deed',
      name: 'Title Deed',
      description: 'Proof of ownership of the property',
      required: true,
      status: 'pending'
    },
    {
      id: 'environmental-impact',
      name: 'Environmental Impact Assessment',
      description: 'Assessment of environmental effects of the construction',
      required: false,
      status: 'pending'
    }
  ]);
  const router = useRouter();
  const { user } = useAuth();

  // Fetch user's applications
  useEffect(() => {
    const fetchApplications = async () => {
      if (!user) return;

      try {
        const token = localStorage.getItem('token');
        const response = await fetch('http://localhost:5001/api/applications/user', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        if (!response.ok) {
          throw new Error('Failed to fetch applications');
        }

        const data = await response.json();
        setApplications(data.applications || []);

        // Set the first application as selected by default
        if (data.applications && data.applications.length > 0) {
          setSelectedApplication(data.applications[0]);
        }
      } catch (err: any) {
        console.error('Error fetching applications:', err);
        toast.error('Failed to load applications');
      } finally {
        setLoadingApplications(false);
      }
    };

    fetchApplications();
  }, [user]);

  // Add a function to fetch document status
  useEffect(() => {
    const fetchDocumentStatus = async () => {
      if (!selectedApplication) return;

      try {
        const token = localStorage.getItem('token');
        // This would be a real API call in a production app
        // For now, we'll simulate a response with random statuses

        // Simulate API call delay
        await new Promise(resolve => setTimeout(resolve, 500));

        // Update document statuses with random values for demonstration
        setDocumentTypes(prev => prev.map(doc => ({
          ...doc,
          status: Math.random() > 0.7 ? 'uploaded' :
                 Math.random() > 0.5 ? 'verified' :
                 Math.random() > 0.3 ? 'rejected' : 'pending',
          fileUrl: Math.random() > 0.6 ? `https://example.com/documents/${doc.id}` : undefined,
          feedback: Math.random() > 0.7 ? 'Document needs to be clearer and include all required sections.' : undefined
        })));

      } catch (err) {
        console.error('Error fetching document status:', err);
        toast.error('Failed to load document status');
      }
    };

    fetchDocumentStatus();
  }, [selectedApplication]);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0]);
      setComplianceResult(null); // Clear previous results
    }
  };

  const handleDocTypeSelect = (docTypeId: string) => {
    setSelectedDocType(docTypeId);
    setFile(null);
    setComplianceResult(null);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!file || !selectedDocType || !selectedApplication) {
      toast.error('Please select a document type and file');
      return;
    }

    setIsLoading(true);
    setProgress(0);
    const formData = new FormData();
    formData.append('document', file);
    formData.append('documentType', selectedDocType);
    formData.append('applicationId', selectedApplication.id.toString());

    try {
      // Upload and check compliance
      setProgress(30);
      // This would be a real API call in a production app
      // For now, we'll simulate a successful upload

      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1500));

      setProgress(60);

      // Simulate compliance check
      await new Promise(resolve => setTimeout(resolve, 1000));

      setProgress(90);

      // Update the document status in our local state
      setDocumentTypes(prev => prev.map(doc =>
        doc.id === selectedDocType
          ? { ...doc, status: 'uploaded', fileUrl: URL.createObjectURL(file) }
          : doc
      ));

      // Simulate a compliance result
      const simulatedResult: ComplianceResult = {
        compliant: Math.random() > 0.3,
        issues: Math.random() > 0.5 ? [
          'Document resolution is too low',
          'Missing required signatures',
          'Incomplete sections detected'
        ] : [],
        textExtracted: 'Sample extracted text from the document...'
      };

      setComplianceResult(simulatedResult);

      if (simulatedResult.compliant) {
        toast.success('Document uploaded and verified successfully!');
      } else {
        toast.warning('Document uploaded but has compliance issues');
      }

      // Move to the next workflow stage if all required documents are uploaded
      const allRequiredUploaded = documentTypes
        .filter(doc => doc.required)
        .every(doc => doc.status === 'uploaded' || doc.status === 'verified' ||
               (doc.id === selectedDocType && simulatedResult.compliant));

      if (allRequiredUploaded) {
        // This would call the workflow API to advance to the next stage
        toast.success('All required documents uploaded! You can now proceed to payment.');

        // Simulate moving to the next workflow stage
        await new Promise(resolve => setTimeout(resolve, 1000));

        // In a real app, this would update the workflow stage in the backend
      }
    } catch (error) {
      console.error('Upload error:', error);
      toast.error(error instanceof Error ? error.message : 'Upload failed');
    } finally {
      setProgress(100);
      setIsLoading(false);
      setTimeout(() => setProgress(0), 1000);
    }
  };

  // If no application is selected, show a message
  if (!loadingApplications && applications.length === 0) {
    return (
      <DashboardLayout userRole="applicant">
        <div className="p-6 bg-gray-100 min-h-screen">
          <div className="max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-md">
            <h1 className="text-2xl font-bold text-[#224057] mb-4">Document Verification</h1>
            <div className="text-center py-8">
              <p className="text-gray-600 mb-4">You need to submit an application before you can verify documents.</p>
              <button
                onClick={() => router.push('/applicant/application-form')}
                className="bg-[#224057] text-white px-4 py-2 rounded-lg hover:bg-[#1a344a] transition-colors"
              >
                Submit an Application
              </button>
            </div>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout userRole="applicant">
      <div className="min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-5xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-[#224057] mb-2">Document Verification</h1>
          <p className="text-gray-600">
            Upload all required documents for your building plan application
          </p>
        </div>

        {/* Document Status Overview */}
        <div className="bg-white shadow rounded-lg p-6 mb-8">
          <h2 className="text-xl font-semibold text-[#224057] mb-4">Document Status</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {documentTypes.map((docType) => (
              <div
                key={docType.id}
                className={`border rounded-lg p-4 cursor-pointer transition-all ${selectedDocType === docType.id ? 'border-[#224057] bg-blue-50' : 'border-gray-200 hover:border-gray-400'}`}
                onClick={() => handleDocTypeSelect(docType.id)}
              >
                <div className="flex justify-between items-start">
                  <div>
                    <h3 className="font-medium text-gray-900">{docType.name}</h3>
                    <p className="text-sm text-gray-500">{docType.description}</p>
                    {docType.required && (
                      <span className="inline-block mt-1 text-xs font-medium text-red-600">Required</span>
                    )}
                  </div>
                  <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                    docType.status === 'verified' ? 'bg-green-50 text-green-600' :
                    docType.status === 'uploaded' ? 'bg-blue-50 text-blue-600' :
                    docType.status === 'rejected' ? 'bg-red-50 text-red-600' :
                    'bg-gray-50 text-gray-600'
                  }`}>
                    {docType.status.charAt(0).toUpperCase() + docType.status.slice(1)}
                  </span>
                </div>

                {docType.fileUrl && (
                  <div className="mt-2 text-sm">
                    <a
                      href={docType.fileUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:underline flex items-center"
                      onClick={(e) => e.stopPropagation()}
                    >
                      <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                      </svg>
                      View Document
                    </a>
                  </div>
                )}

                {docType.feedback && (
                  <div className="mt-2 p-2 bg-red-50 text-red-700 text-sm rounded">
                    <strong>Feedback:</strong> {docType.feedback}
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Document Upload Form */}
        {selectedDocType && (
          <div className="bg-white shadow rounded-lg p-6 mb-8">
            <h2 className="text-xl font-semibold text-[#224057] mb-4">
              Upload {documentTypes.find(d => d.id === selectedDocType)?.name}
            </h2>
            <form onSubmit={handleSubmit} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Select Document File
                </label>
                <div className="mt-1 flex items-center">
                  <input
                    id="document-upload"
                    name="document"
                    type="file"
                    accept=".pdf,.jpg,.jpeg,.png"
                    onChange={handleFileChange}
                    className="block w-full text-sm text-gray-500
                      file:mr-4 file:py-2 file:px-4
                      file:rounded-md file:border-0
                      file:text-sm file:font-semibold
                      file:bg-[#224057] file:text-white
                      hover:file:bg-[#1a344a]"
                    required
                  />
                </div>
                <p className="mt-2 text-xs text-gray-500">
                  PDF, JPG, or PNG (Max. 10MB)
                </p>
              </div>

              {isLoading && (
                <div className="pt-1">
                  <div className="flex justify-between text-sm text-gray-600 mb-1">
                    <span>Processing...</span>
                    <span>{progress}%</span>
                  </div>
                  <div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-gray-200">
                    <div
                      style={{ width: `${progress}%` }}
                      className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-[#224057] transition-all duration-300"
                    ></div>
                  </div>
                </div>
              )}

              <div>
                <button
                  type="submit"
                  disabled={!file || isLoading}
                  className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#224057] hover:bg-[#1a344a] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#224057] ${
                    (!file || isLoading) ? 'opacity-50 cursor-not-allowed' : ''
                  }`}
                >
                  {isLoading ? 'Uploading...' : 'Upload Document'}
                </button>
              </div>
          </form>
        </div>

        {complianceResult && (
          <div className="bg-white shadow rounded-lg overflow-hidden mb-8">
            <div className={`p-4 ${complianceResult.compliant ? 'bg-green-50' : 'bg-yellow-50'}`}>
              <h2 className="text-lg font-medium text-gray-900 mb-2">
                {complianceResult.compliant ? (
                  <span className="text-green-600">✓ Document Verification Successful</span>
                ) : (
                  <span className="text-yellow-600">⚠ Document Verification Issues</span>
                )}
              </h2>

              {complianceResult.issues.length > 0 ? (
                <div className="mt-4 space-y-3">
                  <h3 className="text-sm font-medium text-gray-700">Identified Issues:</h3>
                  <ul className="list-disc pl-5 space-y-1">
                    {complianceResult.issues.map((issue, index) => (
                      <li key={index} className="text-sm text-gray-600">
                        {issue}
                      </li>
                    ))}
                  </ul>
                </div>
              ) : (
                <p className="text-sm text-gray-600">No issues found with this document.</p>
              )}
            </div>

            <div className="p-4 border-t border-gray-200">
              <h3 className="text-sm font-medium text-gray-700 mb-2">Document Analysis</h3>
              <div className="bg-gray-50 p-3 rounded-md max-h-40 overflow-y-auto">
                <p className="text-xs text-gray-600 whitespace-pre-wrap">
                  {complianceResult.textExtracted || 'No text could be extracted from this document'}
                </p>
              </div>
            </div>

            <div className="p-4 border-t border-gray-200 bg-gray-50">
              <div className="flex justify-between items-center">
                <p className="text-sm text-gray-600">
                  {complianceResult.compliant ?
                    'This document has been verified and added to your application.' :
                    'Please address the issues and upload a corrected document.'}
                </p>
                {complianceResult.compliant && (
                  <span className="px-3 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">
                    Verified
                  </span>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Workflow Navigation */}
        <div className="flex justify-between">
          <button
            onClick={() => router.push('/applicant/application-form')}
            className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          >
            Back to Application
          </button>

          <button
            onClick={() => router.push('/applicant/payments')}
            className="px-4 py-2 bg-[#224057] text-white rounded-md hover:bg-[#1a344a] disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={!documentTypes.filter(doc => doc.required).every(doc => doc.status === 'uploaded' || doc.status === 'verified')}
          >
            Proceed to Payment
          </button>
        </div>

        <div className="mt-8 text-center text-sm text-gray-500">
          <p>Need help? Contact our support team for assistance with document verification.</p>
        </div>
      </div>
      </div>
    </DashboardLayout>
  );
}