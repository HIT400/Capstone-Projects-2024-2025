import React from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { FileText, Download, Printer } from 'lucide-react';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import html2canvas from 'html2canvas';

interface DiagnosticReportProps {
  scanResult: any;
  patientInfo?: {
    name: string;
    age: number;
    gender: string;
  };
  date?: Date;
}

const DiagnosticReport: React.FC<DiagnosticReportProps> = ({
  scanResult,
  patientInfo,
  date
}) => {
  // Extract patient info from scanResult if not provided directly
  const patient = patientInfo || {
    name: scanResult.patient?.name || scanResult.patient_name || 'Unknown Patient',
    age: scanResult.patient?.age || parseInt(scanResult.patient_age || '0'),
    gender: scanResult.patient?.gender || scanResult.patient_gender || 'Unknown'
  };
  
  // Use provided date or extract from scanResult
  const reportDate = date || (scanResult.date ? new Date(scanResult.date) : 
                             (scanResult.created_at ? new Date(scanResult.created_at) : new Date()));
  
  // Log the extracted patient info for debugging
  console.log('DiagnosticReport - Using patient info:', patient);
  console.log('DiagnosticReport - Using date:', reportDate);
  const reportRef = React.useRef<HTMLDivElement>(null);
  
  // Format confidence as percentage
  const confidencePercentage = Math.round((scanResult.confidence || 0) * 100);
  
  // Determine classification result text and color
  const isMalignant = scanResult.result === 'Cancer' || scanResult.result === 'Malignant';
  const resultText = isMalignant ? 'Malignant (Cancer)' : 'Benign (Non-Cancer)';
  const resultColor = isMalignant ? 'text-red-600' : 'text-green-600';
  
  // Format date
  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };
  
  // Generate follow-up recommendation based on result
  const getFollowUpRecommendation = () => {
    if (isMalignant) {
      return 'Immediate oncology referral recommended. An appointment has been automatically scheduled.';
    } else {
      return 'Routine 6-month follow-up recommended. A follow-up appointment has been automatically scheduled.';
    }
  };
  
  // Generate medical explanations
  const getMedicalExplanations = () => {
    if (isMalignant) {
      return [
        'The scan shows patterns consistent with malignant tissue.',
        'Suspicious neoplastic lesion identifiedâ€”biopsy recommended.',
        'Further diagnostic imaging (MRI) may be beneficial for treatment planning.',
        'Consider genetic testing for BRCA1/BRCA2 mutations depending on family history.'
      ];
    } else {
      return [
        'No malignant pathology detected in the current scan.',
        'Tissue appears normal with no suspicious masses or calcifications.',
        'Routine surveillance advised according to standard screening protocols.',
        'Patient should continue regular self-examinations.'
      ];
    }
  };
  
  // Download PDF report
  const downloadPDF = async () => {
    if (!reportRef.current) return;
    
    try {
      const reportElement = reportRef.current;
      const canvas = await html2canvas(reportElement, {
        scale: 2,
        logging: false,
        useCORS: true
      });
      
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });
      
      // Add title
      pdf.setFontSize(20);
      pdf.text('Breast Scan Diagnostic Report', 105, 15, { align: 'center' });
      
      // Add image
      const imgWidth = 190;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      pdf.addImage(imgData, 'PNG', 10, 25, imgWidth, imgHeight);
      
      // Add footer
      pdf.setFontSize(10);
      pdf.text('Generated by ScanClassify Pro - AI-Powered Diagnostic Tool', 105, 285, { align: 'center' });
      pdf.text(`Report Date: ${formatDate(new Date())}`, 105, 290, { align: 'center' });
      
      // Save PDF
      pdf.save(`Diagnostic_Report_${patient.name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
    }
  };
  
  // Print report
  const printReport = () => {
    window.print();
  };
  
  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <div className="flex items-center">
          <FileText className="h-5 w-5 mr-2 text-blue-600" />
          <h2 className="text-xl font-bold">Diagnostic Report</h2>
        </div>
        <div className="flex space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={printReport}
            className="flex items-center"
          >
            <Printer className="h-4 w-4 mr-2" />
            Print
          </Button>
          <Button
            size="sm"
            onClick={downloadPDF}
            className="flex items-center bg-blue-600 hover:bg-blue-700"
          >
            <Download className="h-4 w-4 mr-2" />
            Download PDF
          </Button>
        </div>
      </div>
      
      <div ref={reportRef} className="bg-white p-6 rounded-lg border print:shadow-none">
        <div className="text-center mb-6">
          <h1 className="text-2xl font-bold text-gray-900">Breast Scan Diagnostic Report</h1>
          <p className="text-gray-500">ScanClassify Pro - AI-Powered Diagnostic Tool</p>
          <p className="text-sm text-gray-500 mt-1">Report Generated: {formatDate(date)}</p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">Patient Information</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="grid grid-cols-3">
                  <span className="text-gray-500">Name:</span>
                  <span className="col-span-2 font-medium">{patient.name}</span>
                </div>
                <div className="grid grid-cols-3">
                  <span className="text-gray-500">Age:</span>
                  <span className="col-span-2">{patient.age} years</span>
                </div>
                <div className="grid grid-cols-3">
                  <span className="text-gray-500">Gender:</span>
                  <span className="col-span-2">{patient.gender}</span>
                </div>
                <div className="grid grid-cols-3">
                  <span className="text-gray-500">Scan Date:</span>
                  <span className="col-span-2">{formatDate(reportDate)}</span>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">Diagnostic Result</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="grid grid-cols-3">
                  <span className="text-gray-500">Classification:</span>
                  <span className={`col-span-2 font-bold ${resultColor}`}>{resultText}</span>
                </div>
                <div className="grid grid-cols-3">
                  <span className="text-gray-500">Confidence:</span>
                  <span className="col-span-2">{confidencePercentage}%</span>
                </div>
                <div className="grid grid-cols-3">
                  <span className="text-gray-500">Analysis Method:</span>
                  <span className="col-span-2">Deep Learning CNN Model</span>
                </div>
                <div className="grid grid-cols-3">
                  <span className="text-gray-500">Model Version:</span>
                  <span className="col-span-2">ScanClassify v2.0</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
        
        <Card className="mb-6">
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Medical Assessment</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <h4 className="font-medium mb-2">Findings:</h4>
                <ul className="list-disc pl-5 space-y-1">
                  {getMedicalExplanations().map((explanation, index) => (
                    <li key={index} className="text-gray-700">{explanation}</li>
                  ))}
                </ul>
              </div>
              
              <div>
                <h4 className="font-medium mb-2">Follow-up Recommendation:</h4>
                <p className="text-gray-700">{getFollowUpRecommendation()}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <div className="border-t pt-4 text-sm text-gray-500">
          <p className="font-medium">Important Notes:</p>
          <ul className="list-disc pl-5 mt-2 space-y-1">
            <li>This report was generated using artificial intelligence and should be reviewed by a qualified healthcare professional.</li>
            <li>The AI classification is intended as a diagnostic aid and not as a replacement for clinical judgment.</li>
            <li>False positives and false negatives may occur. Clinical correlation is recommended.</li>
            <li>For any urgent concerns, please contact your healthcare provider immediately.</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default DiagnosticReport;
