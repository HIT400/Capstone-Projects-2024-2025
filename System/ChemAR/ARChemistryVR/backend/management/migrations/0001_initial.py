# Generated by Django 5.2 on 2025-04-28 04:23

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.ImageField(upload_to='achievements/')),
                ('requirement', models.TextField()),
                ('points', models.IntegerField(default=0)),
                ('is_assessment_related', models.BooleanField(default=False)),
                ('is_game_related', models.BooleanField(default=False)),
                ('is_time_related', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ClassGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialization', models.CharField(max_length=100)),
                ('qualification', models.CharField(max_length=200)),
                ('bio', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChemistrySubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('difficulty_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('ar_model_path', models.CharField(blank=True, max_length=255, null=True)),
                ('vr_scene_path', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sub_subjects', to='management.chemistrysubject')),
            ],
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('time_limit', models.DurationField(blank=True, null=True)),
                ('passing_score', models.IntegerField(default=60)),
                ('max_attempts', models.IntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('uses_ar', models.BooleanField(default=False)),
                ('uses_vr', models.BooleanField(default=False)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='management.chemistrysubject')),
            ],
        ),
        migrations.CreateModel(
            name='GameAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('game_type', models.CharField(max_length=100)),
                ('difficulty_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('time_limit', models.DurationField(blank=True, null=True)),
                ('environment_path', models.CharField(max_length=255)),
                ('max_points', models.IntegerField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_assessments', to='management.chemistrysubject')),
            ],
        ),
        migrations.CreateModel(
            name='AssignmentSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('assigned_date', models.DateTimeField()),
                ('due_date', models.DateTimeField()),
                ('is_required', models.BooleanField(default=True)),
                ('points', models.IntegerField(default=0)),
                ('assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='management.assessment')),
                ('class_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='management.classgroup')),
                ('game_assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='management.gameassessment')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('interactive_3d', 'Interactive 3D'), ('molecule_building', 'Molecule Building'), ('experiment', 'Virtual Experiment')], max_length=20)),
                ('difficulty', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('points', models.IntegerField(default=1)),
                ('choices', models.JSONField(blank=True, null=True)),
                ('correct_answer', models.CharField(max_length=255)),
                ('ar_content_path', models.CharField(blank=True, max_length=255, null=True)),
                ('vr_content_path', models.CharField(blank=True, max_length=255, null=True)),
                ('interaction_data', models.JSONField(blank=True, null=True)),
                ('explanation', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='management.chemistrysubject')),
            ],
        ),
        migrations.AddField(
            model_name='gameassessment',
            name='questions',
            field=models.ManyToManyField(related_name='game_assessments', to='management.question'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='questions',
            field=models.ManyToManyField(related_name='assessments', to='management.question'),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('avatar', models.CharField(blank=True, max_length=100, null=True)),
                ('total_study_time', models.DurationField(default=datetime.timedelta)),
                ('achievements', models.ManyToManyField(blank=True, related_name='students', to='management.achievement')),
            ],
        ),
        migrations.AddField(
            model_name='classgroup',
            name='students',
            field=models.ManyToManyField(related_name='enrolled_classes', to='management.student'),
        ),
        migrations.CreateModel(
            name='ARVRSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('session_type', models.CharField(choices=[('AR', 'Augmented Reality'), ('VR', 'Virtual Reality')], max_length=10)),
                ('device_used', models.CharField(max_length=100)),
                ('total_interactions', models.IntegerField(default=0)),
                ('session_data', models.JSONField(default=dict)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ar_vr_sessions', to='management.chemistrysubject')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ar_vr_sessions', to='management.student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentAssessmentAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('score', models.FloatField(blank=True, null=True)),
                ('completed', models.BooleanField(default=False)),
                ('answers', models.JSONField(default=dict)),
                ('failed_questions', models.JSONField(default=list)),
                ('correct_questions', models.JSONField(default=list)),
                ('feedback', models.TextField(blank=True)),
                ('time_taken', models.DurationField(blank=True, null=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_attempts', to='management.assessment')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_attempts', to='management.student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentGameAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('completed', models.BooleanField(default=False)),
                ('answers', models.JSONField(default=dict)),
                ('failed_questions', models.JSONField(default=list)),
                ('correct_questions', models.JSONField(default=list)),
                ('interaction_data', models.JSONField(default=dict)),
                ('progression_path', models.JSONField(default=list)),
                ('time_taken', models.DurationField(blank=True, null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_attempts', to='management.gameassessment')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_attempts', to='management.student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency_level', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('assessments_completed', models.IntegerField(default=0)),
                ('games_completed', models.IntegerField(default=0)),
                ('total_study_time', models.DurationField(default=datetime.timedelta)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to='management.student')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='management.chemistrysubject')),
            ],
        ),
        migrations.AddField(
            model_name='classgroup',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='management.teacher'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('student', 'Student'), ('teacher', 'Teacher'), ('admin', 'Admin')], default='student', max_length=10)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='management_user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='management_user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='teacher',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to='management.user'),
        ),
        migrations.AddField(
            model_name='student',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to='management.user'),
        ),
        migrations.AddField(
            model_name='question',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_questions', to='management.user'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('notification_type', models.CharField(choices=[('assessment', 'Assessment'), ('achievement', 'Achievement'), ('reminder', 'Reminder'), ('feedback', 'Feedback'), ('system', 'System')], max_length=20)),
                ('related_link', models.URLField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='management.user')),
            ],
        ),
        migrations.AddField(
            model_name='gameassessment',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_games', to='management.user'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_assessments', to='management.user'),
        ),
        migrations.CreateModel(
            name='AnalyticsData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('total_study_time', models.DurationField(default=datetime.timedelta)),
                ('assessments_taken', models.IntegerField(default=0)),
                ('games_played', models.IntegerField(default=0)),
                ('average_score', models.FloatField(blank=True, null=True)),
                ('ar_time', models.DurationField(default=datetime.timedelta)),
                ('vr_time', models.DurationField(default=datetime.timedelta)),
                ('progress_data', models.JSONField(default=dict)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='management.student')),
            ],
            options={
                'unique_together': {('student', 'date')},
            },
        ),
    ]
